/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.landoop.telecom.telecomitalia.telecommunications;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Schema for Telecommunications Data from Telecom Italia. */
@org.apache.avro.specific.AvroGenerated
public class smsCallInternet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6969091303214932262L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"smsCallInternet\",\"namespace\":\"com.landoop.telecom.telecomitalia.telecommunications\",\"doc\":\"Schema for Telecommunications Data from Telecom Italia.\",\"fields\":[{\"name\":\"SquareId\",\"type\":\"int\",\"doc\":\" The id of the square that is part of the Milano GRID\"},{\"name\":\"TimeInterval\",\"type\":\"long\",\"doc\":\"The beginning of the time interval expressed as the number of millisecond elapsed from the Unix Epoch on January 1st, 1970 at UTC. The end of the time interval can be obtained by adding 600000 milliseconds (10 minutes) to this value.\"},{\"name\":\"CountryCode\",\"type\":\"int\",\"doc\":\"The phone country code of a nation. Depending on the measured activity this value assumes different meanings that are explained later.\"},{\"name\":\"SmsInActivity\",\"type\":[\"null\",\"double\"],\"doc\":\"The activity in terms of received SMS inside the Square id, during the Time interval and sent from the nation identified by the Country code.\"},{\"name\":\"SmsOutActivity\",\"type\":[\"null\",\"double\"],\"doc\":\"The activity in terms of sent SMS inside the Square id, during the Time interval and received by the nation identified by the Country code.\"},{\"name\":\"CallInActivity\",\"type\":[\"null\",\"double\"],\"doc\":\"The activity in terms of received calls inside the Square id, during the Time interval and issued from the nation identified by the Country code.\"},{\"name\":\"CallOutActivity\",\"type\":[\"null\",\"double\"],\"doc\":\"The activity in terms of issued calls inside the Square id, during the Time interval and received by the nation identified by the Country code.\"},{\"name\":\"InternetTrafficActivity\",\"type\":[\"null\",\"double\"],\"doc\":\"The activity in terms of performed internet traffic inside the Square id, during the Time interval and by the nation of the users performing the connection identified by the Country code.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<smsCallInternet> ENCODER =
      new BinaryMessageEncoder<smsCallInternet>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<smsCallInternet> DECODER =
      new BinaryMessageDecoder<smsCallInternet>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<smsCallInternet> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<smsCallInternet> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<smsCallInternet>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this smsCallInternet to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a smsCallInternet from a ByteBuffer. */
  public static smsCallInternet fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /**  The id of the square that is part of the Milano GRID */
  @Deprecated public int SquareId;
  /** The beginning of the time interval expressed as the number of millisecond elapsed from the Unix Epoch on January 1st, 1970 at UTC. The end of the time interval can be obtained by adding 600000 milliseconds (10 minutes) to this value. */
  @Deprecated public long TimeInterval;
  /** The phone country code of a nation. Depending on the measured activity this value assumes different meanings that are explained later. */
  @Deprecated public int CountryCode;
  /** The activity in terms of received SMS inside the Square id, during the Time interval and sent from the nation identified by the Country code. */
  @Deprecated public java.lang.Double SmsInActivity;
  /** The activity in terms of sent SMS inside the Square id, during the Time interval and received by the nation identified by the Country code. */
  @Deprecated public java.lang.Double SmsOutActivity;
  /** The activity in terms of received calls inside the Square id, during the Time interval and issued from the nation identified by the Country code. */
  @Deprecated public java.lang.Double CallInActivity;
  /** The activity in terms of issued calls inside the Square id, during the Time interval and received by the nation identified by the Country code. */
  @Deprecated public java.lang.Double CallOutActivity;
  /** The activity in terms of performed internet traffic inside the Square id, during the Time interval and by the nation of the users performing the connection identified by the Country code. */
  @Deprecated public java.lang.Double InternetTrafficActivity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public smsCallInternet() {}

  /**
   * All-args constructor.
   * @param SquareId  The id of the square that is part of the Milano GRID
   * @param TimeInterval The beginning of the time interval expressed as the number of millisecond elapsed from the Unix Epoch on January 1st, 1970 at UTC. The end of the time interval can be obtained by adding 600000 milliseconds (10 minutes) to this value.
   * @param CountryCode The phone country code of a nation. Depending on the measured activity this value assumes different meanings that are explained later.
   * @param SmsInActivity The activity in terms of received SMS inside the Square id, during the Time interval and sent from the nation identified by the Country code.
   * @param SmsOutActivity The activity in terms of sent SMS inside the Square id, during the Time interval and received by the nation identified by the Country code.
   * @param CallInActivity The activity in terms of received calls inside the Square id, during the Time interval and issued from the nation identified by the Country code.
   * @param CallOutActivity The activity in terms of issued calls inside the Square id, during the Time interval and received by the nation identified by the Country code.
   * @param InternetTrafficActivity The activity in terms of performed internet traffic inside the Square id, during the Time interval and by the nation of the users performing the connection identified by the Country code.
   */
  public smsCallInternet(java.lang.Integer SquareId, java.lang.Long TimeInterval, java.lang.Integer CountryCode, java.lang.Double SmsInActivity, java.lang.Double SmsOutActivity, java.lang.Double CallInActivity, java.lang.Double CallOutActivity, java.lang.Double InternetTrafficActivity) {
    this.SquareId = SquareId;
    this.TimeInterval = TimeInterval;
    this.CountryCode = CountryCode;
    this.SmsInActivity = SmsInActivity;
    this.SmsOutActivity = SmsOutActivity;
    this.CallInActivity = CallInActivity;
    this.CallOutActivity = CallOutActivity;
    this.InternetTrafficActivity = InternetTrafficActivity;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return SquareId;
    case 1: return TimeInterval;
    case 2: return CountryCode;
    case 3: return SmsInActivity;
    case 4: return SmsOutActivity;
    case 5: return CallInActivity;
    case 6: return CallOutActivity;
    case 7: return InternetTrafficActivity;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: SquareId = (java.lang.Integer)value$; break;
    case 1: TimeInterval = (java.lang.Long)value$; break;
    case 2: CountryCode = (java.lang.Integer)value$; break;
    case 3: SmsInActivity = (java.lang.Double)value$; break;
    case 4: SmsOutActivity = (java.lang.Double)value$; break;
    case 5: CallInActivity = (java.lang.Double)value$; break;
    case 6: CallOutActivity = (java.lang.Double)value$; break;
    case 7: InternetTrafficActivity = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'SquareId' field.
   * @return  The id of the square that is part of the Milano GRID
   */
  public java.lang.Integer getSquareId() {
    return SquareId;
  }

  /**
   * Sets the value of the 'SquareId' field.
   *  The id of the square that is part of the Milano GRID
   * @param value the value to set.
   */
  public void setSquareId(java.lang.Integer value) {
    this.SquareId = value;
  }

  /**
   * Gets the value of the 'TimeInterval' field.
   * @return The beginning of the time interval expressed as the number of millisecond elapsed from the Unix Epoch on January 1st, 1970 at UTC. The end of the time interval can be obtained by adding 600000 milliseconds (10 minutes) to this value.
   */
  public java.lang.Long getTimeInterval() {
    return TimeInterval;
  }

  /**
   * Sets the value of the 'TimeInterval' field.
   * The beginning of the time interval expressed as the number of millisecond elapsed from the Unix Epoch on January 1st, 1970 at UTC. The end of the time interval can be obtained by adding 600000 milliseconds (10 minutes) to this value.
   * @param value the value to set.
   */
  public void setTimeInterval(java.lang.Long value) {
    this.TimeInterval = value;
  }

  /**
   * Gets the value of the 'CountryCode' field.
   * @return The phone country code of a nation. Depending on the measured activity this value assumes different meanings that are explained later.
   */
  public java.lang.Integer getCountryCode() {
    return CountryCode;
  }

  /**
   * Sets the value of the 'CountryCode' field.
   * The phone country code of a nation. Depending on the measured activity this value assumes different meanings that are explained later.
   * @param value the value to set.
   */
  public void setCountryCode(java.lang.Integer value) {
    this.CountryCode = value;
  }

  /**
   * Gets the value of the 'SmsInActivity' field.
   * @return The activity in terms of received SMS inside the Square id, during the Time interval and sent from the nation identified by the Country code.
   */
  public java.lang.Double getSmsInActivity() {
    return SmsInActivity;
  }

  /**
   * Sets the value of the 'SmsInActivity' field.
   * The activity in terms of received SMS inside the Square id, during the Time interval and sent from the nation identified by the Country code.
   * @param value the value to set.
   */
  public void setSmsInActivity(java.lang.Double value) {
    this.SmsInActivity = value;
  }

  /**
   * Gets the value of the 'SmsOutActivity' field.
   * @return The activity in terms of sent SMS inside the Square id, during the Time interval and received by the nation identified by the Country code.
   */
  public java.lang.Double getSmsOutActivity() {
    return SmsOutActivity;
  }

  /**
   * Sets the value of the 'SmsOutActivity' field.
   * The activity in terms of sent SMS inside the Square id, during the Time interval and received by the nation identified by the Country code.
   * @param value the value to set.
   */
  public void setSmsOutActivity(java.lang.Double value) {
    this.SmsOutActivity = value;
  }

  /**
   * Gets the value of the 'CallInActivity' field.
   * @return The activity in terms of received calls inside the Square id, during the Time interval and issued from the nation identified by the Country code.
   */
  public java.lang.Double getCallInActivity() {
    return CallInActivity;
  }

  /**
   * Sets the value of the 'CallInActivity' field.
   * The activity in terms of received calls inside the Square id, during the Time interval and issued from the nation identified by the Country code.
   * @param value the value to set.
   */
  public void setCallInActivity(java.lang.Double value) {
    this.CallInActivity = value;
  }

  /**
   * Gets the value of the 'CallOutActivity' field.
   * @return The activity in terms of issued calls inside the Square id, during the Time interval and received by the nation identified by the Country code.
   */
  public java.lang.Double getCallOutActivity() {
    return CallOutActivity;
  }

  /**
   * Sets the value of the 'CallOutActivity' field.
   * The activity in terms of issued calls inside the Square id, during the Time interval and received by the nation identified by the Country code.
   * @param value the value to set.
   */
  public void setCallOutActivity(java.lang.Double value) {
    this.CallOutActivity = value;
  }

  /**
   * Gets the value of the 'InternetTrafficActivity' field.
   * @return The activity in terms of performed internet traffic inside the Square id, during the Time interval and by the nation of the users performing the connection identified by the Country code.
   */
  public java.lang.Double getInternetTrafficActivity() {
    return InternetTrafficActivity;
  }

  /**
   * Sets the value of the 'InternetTrafficActivity' field.
   * The activity in terms of performed internet traffic inside the Square id, during the Time interval and by the nation of the users performing the connection identified by the Country code.
   * @param value the value to set.
   */
  public void setInternetTrafficActivity(java.lang.Double value) {
    this.InternetTrafficActivity = value;
  }

  /**
   * Creates a new smsCallInternet RecordBuilder.
   * @return A new smsCallInternet RecordBuilder
   */
  public static com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder newBuilder() {
    return new com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder();
  }

  /**
   * Creates a new smsCallInternet RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new smsCallInternet RecordBuilder
   */
  public static com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder newBuilder(com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder other) {
    return new com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder(other);
  }

  /**
   * Creates a new smsCallInternet RecordBuilder by copying an existing smsCallInternet instance.
   * @param other The existing instance to copy.
   * @return A new smsCallInternet RecordBuilder
   */
  public static com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder newBuilder(com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet other) {
    return new com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder(other);
  }

  /**
   * RecordBuilder for smsCallInternet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<smsCallInternet>
    implements org.apache.avro.data.RecordBuilder<smsCallInternet> {

    /**  The id of the square that is part of the Milano GRID */
    private int SquareId;
    /** The beginning of the time interval expressed as the number of millisecond elapsed from the Unix Epoch on January 1st, 1970 at UTC. The end of the time interval can be obtained by adding 600000 milliseconds (10 minutes) to this value. */
    private long TimeInterval;
    /** The phone country code of a nation. Depending on the measured activity this value assumes different meanings that are explained later. */
    private int CountryCode;
    /** The activity in terms of received SMS inside the Square id, during the Time interval and sent from the nation identified by the Country code. */
    private java.lang.Double SmsInActivity;
    /** The activity in terms of sent SMS inside the Square id, during the Time interval and received by the nation identified by the Country code. */
    private java.lang.Double SmsOutActivity;
    /** The activity in terms of received calls inside the Square id, during the Time interval and issued from the nation identified by the Country code. */
    private java.lang.Double CallInActivity;
    /** The activity in terms of issued calls inside the Square id, during the Time interval and received by the nation identified by the Country code. */
    private java.lang.Double CallOutActivity;
    /** The activity in terms of performed internet traffic inside the Square id, during the Time interval and by the nation of the users performing the connection identified by the Country code. */
    private java.lang.Double InternetTrafficActivity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.SquareId)) {
        this.SquareId = data().deepCopy(fields()[0].schema(), other.SquareId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.TimeInterval)) {
        this.TimeInterval = data().deepCopy(fields()[1].schema(), other.TimeInterval);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.CountryCode)) {
        this.CountryCode = data().deepCopy(fields()[2].schema(), other.CountryCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.SmsInActivity)) {
        this.SmsInActivity = data().deepCopy(fields()[3].schema(), other.SmsInActivity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.SmsOutActivity)) {
        this.SmsOutActivity = data().deepCopy(fields()[4].schema(), other.SmsOutActivity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.CallInActivity)) {
        this.CallInActivity = data().deepCopy(fields()[5].schema(), other.CallInActivity);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.CallOutActivity)) {
        this.CallOutActivity = data().deepCopy(fields()[6].schema(), other.CallOutActivity);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.InternetTrafficActivity)) {
        this.InternetTrafficActivity = data().deepCopy(fields()[7].schema(), other.InternetTrafficActivity);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing smsCallInternet instance
     * @param other The existing instance to copy.
     */
    private Builder(com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.SquareId)) {
        this.SquareId = data().deepCopy(fields()[0].schema(), other.SquareId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.TimeInterval)) {
        this.TimeInterval = data().deepCopy(fields()[1].schema(), other.TimeInterval);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.CountryCode)) {
        this.CountryCode = data().deepCopy(fields()[2].schema(), other.CountryCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.SmsInActivity)) {
        this.SmsInActivity = data().deepCopy(fields()[3].schema(), other.SmsInActivity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.SmsOutActivity)) {
        this.SmsOutActivity = data().deepCopy(fields()[4].schema(), other.SmsOutActivity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.CallInActivity)) {
        this.CallInActivity = data().deepCopy(fields()[5].schema(), other.CallInActivity);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.CallOutActivity)) {
        this.CallOutActivity = data().deepCopy(fields()[6].schema(), other.CallOutActivity);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.InternetTrafficActivity)) {
        this.InternetTrafficActivity = data().deepCopy(fields()[7].schema(), other.InternetTrafficActivity);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'SquareId' field.
      *  The id of the square that is part of the Milano GRID
      * @return The value.
      */
    public java.lang.Integer getSquareId() {
      return SquareId;
    }

    /**
      * Sets the value of the 'SquareId' field.
      *  The id of the square that is part of the Milano GRID
      * @param value The value of 'SquareId'.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder setSquareId(int value) {
      validate(fields()[0], value);
      this.SquareId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'SquareId' field has been set.
      *  The id of the square that is part of the Milano GRID
      * @return True if the 'SquareId' field has been set, false otherwise.
      */
    public boolean hasSquareId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'SquareId' field.
      *  The id of the square that is part of the Milano GRID
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder clearSquareId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'TimeInterval' field.
      * The beginning of the time interval expressed as the number of millisecond elapsed from the Unix Epoch on January 1st, 1970 at UTC. The end of the time interval can be obtained by adding 600000 milliseconds (10 minutes) to this value.
      * @return The value.
      */
    public java.lang.Long getTimeInterval() {
      return TimeInterval;
    }

    /**
      * Sets the value of the 'TimeInterval' field.
      * The beginning of the time interval expressed as the number of millisecond elapsed from the Unix Epoch on January 1st, 1970 at UTC. The end of the time interval can be obtained by adding 600000 milliseconds (10 minutes) to this value.
      * @param value The value of 'TimeInterval'.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder setTimeInterval(long value) {
      validate(fields()[1], value);
      this.TimeInterval = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'TimeInterval' field has been set.
      * The beginning of the time interval expressed as the number of millisecond elapsed from the Unix Epoch on January 1st, 1970 at UTC. The end of the time interval can be obtained by adding 600000 milliseconds (10 minutes) to this value.
      * @return True if the 'TimeInterval' field has been set, false otherwise.
      */
    public boolean hasTimeInterval() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'TimeInterval' field.
      * The beginning of the time interval expressed as the number of millisecond elapsed from the Unix Epoch on January 1st, 1970 at UTC. The end of the time interval can be obtained by adding 600000 milliseconds (10 minutes) to this value.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder clearTimeInterval() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'CountryCode' field.
      * The phone country code of a nation. Depending on the measured activity this value assumes different meanings that are explained later.
      * @return The value.
      */
    public java.lang.Integer getCountryCode() {
      return CountryCode;
    }

    /**
      * Sets the value of the 'CountryCode' field.
      * The phone country code of a nation. Depending on the measured activity this value assumes different meanings that are explained later.
      * @param value The value of 'CountryCode'.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder setCountryCode(int value) {
      validate(fields()[2], value);
      this.CountryCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'CountryCode' field has been set.
      * The phone country code of a nation. Depending on the measured activity this value assumes different meanings that are explained later.
      * @return True if the 'CountryCode' field has been set, false otherwise.
      */
    public boolean hasCountryCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'CountryCode' field.
      * The phone country code of a nation. Depending on the measured activity this value assumes different meanings that are explained later.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder clearCountryCode() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'SmsInActivity' field.
      * The activity in terms of received SMS inside the Square id, during the Time interval and sent from the nation identified by the Country code.
      * @return The value.
      */
    public java.lang.Double getSmsInActivity() {
      return SmsInActivity;
    }

    /**
      * Sets the value of the 'SmsInActivity' field.
      * The activity in terms of received SMS inside the Square id, during the Time interval and sent from the nation identified by the Country code.
      * @param value The value of 'SmsInActivity'.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder setSmsInActivity(java.lang.Double value) {
      validate(fields()[3], value);
      this.SmsInActivity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'SmsInActivity' field has been set.
      * The activity in terms of received SMS inside the Square id, during the Time interval and sent from the nation identified by the Country code.
      * @return True if the 'SmsInActivity' field has been set, false otherwise.
      */
    public boolean hasSmsInActivity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'SmsInActivity' field.
      * The activity in terms of received SMS inside the Square id, during the Time interval and sent from the nation identified by the Country code.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder clearSmsInActivity() {
      SmsInActivity = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'SmsOutActivity' field.
      * The activity in terms of sent SMS inside the Square id, during the Time interval and received by the nation identified by the Country code.
      * @return The value.
      */
    public java.lang.Double getSmsOutActivity() {
      return SmsOutActivity;
    }

    /**
      * Sets the value of the 'SmsOutActivity' field.
      * The activity in terms of sent SMS inside the Square id, during the Time interval and received by the nation identified by the Country code.
      * @param value The value of 'SmsOutActivity'.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder setSmsOutActivity(java.lang.Double value) {
      validate(fields()[4], value);
      this.SmsOutActivity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'SmsOutActivity' field has been set.
      * The activity in terms of sent SMS inside the Square id, during the Time interval and received by the nation identified by the Country code.
      * @return True if the 'SmsOutActivity' field has been set, false otherwise.
      */
    public boolean hasSmsOutActivity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'SmsOutActivity' field.
      * The activity in terms of sent SMS inside the Square id, during the Time interval and received by the nation identified by the Country code.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder clearSmsOutActivity() {
      SmsOutActivity = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'CallInActivity' field.
      * The activity in terms of received calls inside the Square id, during the Time interval and issued from the nation identified by the Country code.
      * @return The value.
      */
    public java.lang.Double getCallInActivity() {
      return CallInActivity;
    }

    /**
      * Sets the value of the 'CallInActivity' field.
      * The activity in terms of received calls inside the Square id, during the Time interval and issued from the nation identified by the Country code.
      * @param value The value of 'CallInActivity'.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder setCallInActivity(java.lang.Double value) {
      validate(fields()[5], value);
      this.CallInActivity = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'CallInActivity' field has been set.
      * The activity in terms of received calls inside the Square id, during the Time interval and issued from the nation identified by the Country code.
      * @return True if the 'CallInActivity' field has been set, false otherwise.
      */
    public boolean hasCallInActivity() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'CallInActivity' field.
      * The activity in terms of received calls inside the Square id, during the Time interval and issued from the nation identified by the Country code.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder clearCallInActivity() {
      CallInActivity = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'CallOutActivity' field.
      * The activity in terms of issued calls inside the Square id, during the Time interval and received by the nation identified by the Country code.
      * @return The value.
      */
    public java.lang.Double getCallOutActivity() {
      return CallOutActivity;
    }

    /**
      * Sets the value of the 'CallOutActivity' field.
      * The activity in terms of issued calls inside the Square id, during the Time interval and received by the nation identified by the Country code.
      * @param value The value of 'CallOutActivity'.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder setCallOutActivity(java.lang.Double value) {
      validate(fields()[6], value);
      this.CallOutActivity = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'CallOutActivity' field has been set.
      * The activity in terms of issued calls inside the Square id, during the Time interval and received by the nation identified by the Country code.
      * @return True if the 'CallOutActivity' field has been set, false otherwise.
      */
    public boolean hasCallOutActivity() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'CallOutActivity' field.
      * The activity in terms of issued calls inside the Square id, during the Time interval and received by the nation identified by the Country code.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder clearCallOutActivity() {
      CallOutActivity = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'InternetTrafficActivity' field.
      * The activity in terms of performed internet traffic inside the Square id, during the Time interval and by the nation of the users performing the connection identified by the Country code.
      * @return The value.
      */
    public java.lang.Double getInternetTrafficActivity() {
      return InternetTrafficActivity;
    }

    /**
      * Sets the value of the 'InternetTrafficActivity' field.
      * The activity in terms of performed internet traffic inside the Square id, during the Time interval and by the nation of the users performing the connection identified by the Country code.
      * @param value The value of 'InternetTrafficActivity'.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder setInternetTrafficActivity(java.lang.Double value) {
      validate(fields()[7], value);
      this.InternetTrafficActivity = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'InternetTrafficActivity' field has been set.
      * The activity in terms of performed internet traffic inside the Square id, during the Time interval and by the nation of the users performing the connection identified by the Country code.
      * @return True if the 'InternetTrafficActivity' field has been set, false otherwise.
      */
    public boolean hasInternetTrafficActivity() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'InternetTrafficActivity' field.
      * The activity in terms of performed internet traffic inside the Square id, during the Time interval and by the nation of the users performing the connection identified by the Country code.
      * @return This builder.
      */
    public com.landoop.telecom.telecomitalia.telecommunications.smsCallInternet.Builder clearInternetTrafficActivity() {
      InternetTrafficActivity = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public smsCallInternet build() {
      try {
        smsCallInternet record = new smsCallInternet();
        record.SquareId = fieldSetFlags()[0] ? this.SquareId : (java.lang.Integer) defaultValue(fields()[0]);
        record.TimeInterval = fieldSetFlags()[1] ? this.TimeInterval : (java.lang.Long) defaultValue(fields()[1]);
        record.CountryCode = fieldSetFlags()[2] ? this.CountryCode : (java.lang.Integer) defaultValue(fields()[2]);
        record.SmsInActivity = fieldSetFlags()[3] ? this.SmsInActivity : (java.lang.Double) defaultValue(fields()[3]);
        record.SmsOutActivity = fieldSetFlags()[4] ? this.SmsOutActivity : (java.lang.Double) defaultValue(fields()[4]);
        record.CallInActivity = fieldSetFlags()[5] ? this.CallInActivity : (java.lang.Double) defaultValue(fields()[5]);
        record.CallOutActivity = fieldSetFlags()[6] ? this.CallOutActivity : (java.lang.Double) defaultValue(fields()[6]);
        record.InternetTrafficActivity = fieldSetFlags()[7] ? this.InternetTrafficActivity : (java.lang.Double) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<smsCallInternet>
    WRITER$ = (org.apache.avro.io.DatumWriter<smsCallInternet>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<smsCallInternet>
    READER$ = (org.apache.avro.io.DatumReader<smsCallInternet>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
